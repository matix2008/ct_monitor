"""monitor/notifier.py - –£–≤–µ–¥–æ–º–∏—Ç–µ–ª—å –¥–ª—è Telegram"""

from typing import List
from typing import Any, Coroutine
import signal
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from telegram.error import TelegramError
from monitor.incident_manager import Incident, IncidentManager
from monitor.notifier import Notifier

class TelegramNotifier(Notifier):
    """
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ —Å–æ–±—ã—Ç–∏—è—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ Telegram.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ä–æ–ª—è–º.
    """

    def __init__(self, token: str, users: List[dict], incidents: IncidentManager, logger=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç TelegramNotifier.

        :param token: —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
        :param users: —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö ID, –∏–º–µ–Ω–µ–º –∏ —Ä–æ–ª—å—é
        :param incidents: —ç–∫–∑–µ–º–ø–ª—è—Ä IncidentManager
        :param logger: –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
        """
        self.token = token
        self.incidents = incidents
        self.logger = logger or logging.getLogger(__name__)

        self.users = {
            user["telegram_id"]: {
                "name": user["name"],
                "role": user.get("role", "Spectator")
            }
            for user in users
        }

        self.app = Application.builder().token(self.token).build()

        # –ö–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("start", self.start_handler))
        self.app.add_handler(CommandHandler("shutdown", self.shutdown_handler))
        self.app.add_handler(CommandHandler("help", self.help_handler))
        self.app.add_handler(CommandHandler("status", self.status_handler))
        self.app.add_handler(CommandHandler("refresh", self.refresh_handler))
        self.app.add_handler(CommandHandler("whoami", self.whoami_handler))
        # –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        self.app.add_handler(MessageHandler(filters.COMMAND, self.unknown_command_handler))

    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling."""
        self.logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
        self.app.run_polling(stop_signals={signal.SIGINT, signal.SIGTERM})

    def get_user_role(self, user_id: int) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ Telegram ID.

        :param user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: —Å—Ç—Ä–æ–∫–∞ —Å —Ä–æ–ª—å—é (Admin, Auditor, Spectator –∏ —Ç. –¥.)
        """
        return self.users.get(user_id, {}).get("role", "None")

    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
        return self.get_user_role(user_id) == "Admin"

    def is_admin_or_auditor(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫–∞–∫ Auditor –∏–ª–∏ Admin."""
        return self.get_user_role(user_id) in {"Admin", "Auditor"}

    async def start_handler(self, update: Update, _context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã.")

    async def shutdown_handler(self, update: Update, _context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /shutdown ‚Äî –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∞."""
        user_id = update.effective_user.id
        if self.is_admin(user_id):
            await update.message.reply_text("‚ÑπÔ∏è –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
            self.app.stop_running() # –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –∏ ... –º–æ–Ω–∏—Ç–æ—Ä
        else:
            await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    async def help_handler(self, update: Update, _context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞."""
        await update.message.reply_text(
            "üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
            "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "/whoami ‚Äî –≤–∞—à Telegram ID –∏ —Ä–æ–ª—å\n"
            "/status ‚Äî —Ç–µ–∫—É—â–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã (Admin/Auditor)\n"
            "/refresh ‚Äî –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å –∂—É—Ä–Ω–∞–ª (Admin)\n"
            "/shutdown ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –º–æ–Ω–∏—Ç–æ—Ä–∞ (Admin)"
        )

    async def whoami_handler(self, update: Update, _context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /whoami ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Telegram ID –∏ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user = update.effective_user
        role = self.get_user_role(user.id)
        msg = f"üë§ –í—ã: {user.full_name}\nüÜî Telegram ID: {user.id}\nüîê –†–æ–ª—å: {role}"
        await update.message.reply_text(msg)

    async def status_handler(self, update: Update, _context: ContextTypes.DEFAULT_TYPE):
        """
        –ö–æ–º–∞–Ω–¥–∞ /status ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã.
        –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ Admin –∏ Auditor.
        """
        user_id = update.effective_user.id
        if not self.is_admin_or_auditor(user_id):
            await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è —Ä–æ–ª–µ–π Admin –∏ Auditor.")
            return

        active = self.incidents.get_active()
        if not active:
            await update.message.reply_text("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –Ω–µ—Ç.")
        else:
            report = "\n".join(f"‚ö†Ô∏è {i.resource_name} (—Å {i.start_time})" for i in active)
            await update.message.reply_text(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã:\n{report}")

    async def refresh_handler(self, update: Update, _context: ContextTypes.DEFAULT_TYPE):
        """
        –ö–æ–º–∞–Ω–¥–∞ /refresh ‚Äî –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ—Ç –∂—É—Ä–Ω–∞–ª –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞.
        –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ Admin.
        """
        user_id = update.effective_user.id
        if not self.is_admin(user_id):
            await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        self.incidents.reload_active_incidents()
        await update.message.reply_text("üîÑ –ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –ø–µ—Ä–µ—á–∏—Ç–∞–Ω—ã –∏–∑ –∂—É—Ä–Ω–∞–ª–∞.")

    async def unknown_command_handler(self, update: Update, _context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."""
        await update.message.reply_text("‚õî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. \
                                        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.")

    async def notify_incident(self, incident: Incident):
        """
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –Ω–∞—á–∞–ª–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞.

        :param resource_name: –∏–º—è —Ä–µ—Å—É—Ä—Å–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞
        """
        for user_id in self.users:
            try:
                await self.app.bot.send_message(chat_id=user_id, text=f"‚ùó –ò–Ω—Ü–∏–¥–µ–Ω—Ç: {incident}")
            except TelegramError as e:
                self.logger.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %s", e)

    async def notify_recovery(self, incident: Incident):
        """
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞.

        :param resource_name: –∏–º—è —Ä–µ—Å—É—Ä—Å–∞, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–≤—à–µ–≥–æ —Ä–∞–±–æ—Ç—É
        """
        for user_id in self.users:
            try:
                await self.app.bot.\
                    send_message(chat_id=user_id, text=f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: {incident}")
            except TelegramError as e:
                self.logger.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %s", e)

    async def notify_info(self, message: str):
        """
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ Admin –∏ Auditor –æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö (–∑–∞–ø—É—Å–∫, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —Ç.–¥.).

        :param message: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        for user_id, info in self.users.items():
            if info["role"] in {"Admin", "Auditor"}:
                try:
                    await self.app.bot.send_message(chat_id=user_id, text=f"‚ÑπÔ∏è {message}")
                except TelegramError as e:
                    self.logger.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %s", e)

    def send_task(self, coro: Coroutine[Any, Any, Any]):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç coroutine –≤ loop'e Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        —Å –ø–æ–º–æ—â—å—é job_queue (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ PTB).
        """
        if self.app and self.app.job_queue:
            self.app.job_queue.run_once(lambda _: self.app.create_task(coro), when=1)
        else:
            self.logger.warning("JobQueue –Ω–µ –≥–æ—Ç–æ–≤ ‚Äî –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å coroutine.")
