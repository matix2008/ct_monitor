#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∑–∞–ø—É—Å–∫—É –≤ Docker
"""

import json
import os
from pathlib import Path
from jsonschema import validate

def check_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    required_files = [
        "config.json",
        ".secrets.json",
        "docker-compose.yml",
        "Dockerfile",
        "requirements.txt",
        "main.py"
    ]
    
    missing_files = []
    for file in required_files:
        if not Path(file).exists():
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False
    else:
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True

def validate_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å config.json"""
    try:
        with open("config.json", "r", encoding="utf-8") as f:
            config = json.load(f)
        
        with open("monitor/config_schema.json", "r", encoding="utf-8") as f:
            schema = json.load(f)
        
        validate(instance=config, schema=schema)
        print("‚úÖ config.json –≤–∞–ª–∏–¥–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ config.json: {e}")
        return False

def check_secrets():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ .secrets.json"""
    try:
        with open(".secrets.json", "r", encoding="utf-8") as f:
            secrets = json.load(f)
        
        token = secrets.get("telegram_token", "")
        if not token or token == "YOUR_TELEGRAM_BOT_TOKEN_HERE":
            print("‚ö†Ô∏è  –í .secrets.json –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω")
            return False
        else:
            print("‚úÖ Telegram —Ç–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .secrets.json: {e}")
        return False

def check_docker_compose():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç docker-compose.yml"""
    try:
        with open("docker-compose.yml", "r", encoding="utf-8") as f:
            content = f.read()
        
        if ".secrets.json" in content and "config.json" in content:
            print("‚úÖ docker-compose.yml –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            return True
        else:
            print("‚ùå docker-compose.yml —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏ –≤ –ø—É—Ç—è—Ö")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è docker-compose.yml: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∑–∞–ø—É—Å–∫—É –≤ Docker...\n")
    
    checks = [
        ("–§–∞–π–ª—ã", check_files),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", validate_config),
        ("–°–µ–∫—Ä–µ—Ç—ã", check_secrets),
        ("Docker Compose", check_docker_compose)
    ]
    
    all_passed = True
    for name, check_func in checks:
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {name}:")
        if not check_func():
            all_passed = False
        print()
    
    if all_passed:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å Docker.")
        print("\n–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞:")
        print("  docker-compose up -d --build")
        print("  docker-compose logs -f")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
    
    return all_passed

if __name__ == "__main__":
    main() 